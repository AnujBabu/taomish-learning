
1) Grid
        
        CSS Grid Layout provides a two dimensional layout system, controlling layout in rows and columns. 
        In this module discover everything grid has to offer.

        A really common layout in web design is a header, sidebar, body and footer layout.

        A grid can be defined with rows and columns. You can choose how to size these row and column tracks or they can react to the size of the content.
        Direct children of the grid container will be automatically placed onto this grid.
        Or, you can place the items in the precise location that you want.
        Lines and areas on the grid can be named to make placement easier.
        Spare space in the grid container can be distributed between the tracks.
        Grid items can be aligned within their area.

        1.1) Grid lines 
                A grid is made up of lines, which run horizontally and vertically. If your grid has four columns, it will have five column lines including the one after the last column.

        1.2) Grid tracks 
                A track is the space between two grid lines. A row track is between two row lines and a column track between two column lines. When we create our grid we create these tracks by assigning a size to them.

        1.3) Grid cell 
                A grid cell is the smallest space on a grid defined by the intersection of row and column tracks. It's just like a table cell or a cell in a spreadsheet. If you define a grid and don't place any of the items they will automatically be laid out one item into each defined grid cell.

        1.4) Grid area 
                Several grid cells together. Grid areas are created by causing an item to span over multiple tracks.

        1.5) Gaps 
                A gutter or alley between tracks. For sizing purposes these act like a regular track. You can't place content into a gap but you can span grid items across it.

        1.6) Grid container 
                The HTML element which has display: grid applied, and therefore creates a new grid formatting context for the direct children.
                
                example:
                    .container {
                    display: grid;
                    }

        1.7) Grid item 
                A grid item is an item which is a direct child of the grid container.

        1.8) Rows and columns 
                To create a basic grid you can define a grid with three column tracks, two row tracks and a 10 pixel gap between the tracks as follows.

                    example:
                                .container {
                                                display: grid;
                                                grid-template-columns: 5em 100px 30%;
                                                grid-template-rows: 200px auto;
                                                gap: 10px;
                                            }
        1.9) Intrinsic sizing keywords 
                In addition to the length and percentage dimensions as described in the section on sizing units, grid tracks can use intrinsic sizing keywords. These keywords are defined in the Box Sizing specification and add additional methods of sizing boxes in CSS, not just grid tracks.

                min-content
                max-content
                fit-content()

                The min-content keyword will make a track as small as it can be without the track content overflowing. Changing the example grid layout to have three column tracks all at min-content size will mean they become as narrow as the longest word in the track.

                The max-content keyword has the opposite effect. The track will become as wide enough for all of the content to display in one long unbroken string. This might cause overflows as the string will not wrap.

                The fit-content() function acts like max-content at first. However, once the track reaches the size that you pass into the function, the content starts to wrap. So fit-content(10em) will create a track that is less than 10em, if the max-content size is less than 10em, but never larger than 10em.
        
        1.10) The fr unit 
                We have existing length dimensions, percentages, and also these new keywords. There is also a special sizing method which only works in grid layout. This is the fr unit, a flexible length which describes a share of the available space in the grid container.
        
        1.11) Spanning tracks 
                You can cause some or all of the items in an auto-placed layout to span more than one track. Use the span keyword plus the number of lines to span as a value for grid-column-end or grid-row-end.

2) Named grid lines 
            It can make it easier to place items into a layout if the lines have a name rather than a number. You can name any line on your grid by adding a name of your choosing between square brackets. Multiple names can be added, separated by a space inside the same brackets. Once you have named lines they can be used instead of the numbers.

            2.1) Grid Template Areas 
                        You can also name areas of the grid and place items onto those named areas. This is a lovely technique as it allows you to see what your component looks like right there in the CSS.

                        example: 
                                    .container {
                                                    display: grid;
                                                    grid-template-columns: repeat(4,1fr);
                                                    grid-template-areas:
                                                        "header header header header"
                                                        "sidebar content content content"
                                                        "sidebar footer footer footer";
                                                }