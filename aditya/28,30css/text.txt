Inline Styles
<p style='color: red;'>I'm learning to code!</p>

<p style='color: red; font-size: 20px;'>I'm learning to code!</p>

Internal Stylesheet

<head>
  <title>Vacation World</title>
  <style>
    p {
      color: green;
    }
  </style>
</head>

External Stylesheet

*linking:
Linking the CSS File
Perfect! We successfully separated structure (HTML) from styling (CSS), but the web page still looks bland. Why?

When HTML and CSS codes are in separate files, the files must be linked. Otherwise, the HTML file won’t be able to locate the CSS code, and the styling will not be applied.

You can use the <link> element to link HTML and CSS files together. The <link> element must be placed within the head of the HTML file.

*SELECTORS
Universal


*class
eg in HTML<h1 class='title'>Top Vacation Spots</h1>

for this css will be
.title{
    color:red;
}

*Multiple Classes

*ID
Oftentimes it’s important to select a single element with CSS to give it its own unique style. If an HTML element needs to be styled uniquely, we can give it an ID using the id attribute.

<h1 id='large-title'> ... </h1>
In contrast to class which accepts multiple values, and can be used broadly throughout an HTML document, an element’s id can only have a single value, and only be used once per page.

To select an element’s ID with CSS, we prepend the id name with a number sign (#). For instance, if we wanted to select the HTML element in the example above, it would look like this:

#large-title {
 
}
The id name is large-title, therefore the CSS selector for it is #large-title.


*Attribute
<img src='/images/seasons/cold/winter.jpg'>
<img src='/images/seasons/warm/summer.jpg'>

img[src*='winter'] {
  height: 50px;
}
 
img[src*='summer'] {
  height: 100px;
}

*Pseudo-class
You may have observed how the appearance of certain elements can change, or be in a different state, after certain user interactions. For instance:

When you click on an <input> element, and a blue border is added showing that it is in focus.
When you click on a blue <a> link to visit to another page, but when you return the link’s text is purple.
When you’re filling out a form and the submit button is grayed out and disabled. But when all of the fields have been filled out, the button has color showing that it’s active.
These are all examples of pseudo-class selectors in action! In fact, :focus, :visited, :disabled, and :active are all pseudo-classes.

p:hover {
  background-color: lime;
}




*Specificity
Specificity is the order by which the browser decides which CSS styles will be displayed. A best practice in CSS is to style elements while using the lowest degree of specificity so that if an element needs a new style, it is easy to override.
 <h5 class='author-class' id='author-id'>By: Stacy Gray</h5>
The element now has 3 ways of selecting it, by type, class, and ID. 

use any:
h5{
  color:yellow;
}
.author-class{
  color:pink;
}
#author-id{
  color:cornflowerblue;
}


* h1.special{

}   by this we can specify heading changes

*Multiple Selectors
In order to make CSS more concise, it’s possible to add CSS styles to multiple CSS selectors all at once. This prevents writing repetitive code.

For instance, the following code has repetitive style attributes:

h1 {
  font-family: Georgia;
}
 
.menu {
  font-family: Georgia;
}


*VISUAL RULES
Font Family

When the name of a typeface consists of more than one word, it’s a best practice to enclose the typeface’s name in quotes, like so:
h1 {
  font-family: 'Courier New';
}

*Font Size
p {
  font-size: 18px;
}

*
Font Weight
In CSS, the font-weight property controls how bold or thin text appears.

p {
  font-weight: bold;
}

*VISUAL RULES
Text Align
No matter how much styling is applied to text (typeface, size, weight, etc.), the text always appears on the left side of the container in which it resides.

To align text we can use the text-align property. The text-align property will align text to the element that holds it, otherwise known as its parent.

h1 {
  text-align: right;
}

*Color and Background Color

.caption{
  background-color: white;
  color: black;
}

*Opacity
Opacity is the measure of how transparent an element is. It’s measured from 0 to 1, with 1 representing 100%, or fully visible and opaque, and 0 representing 0%, or fully invisible.
.overlay {
  opacity: 0.5;
}

*Background Image
CSS has the ability to change the background of an element. One option is to make the background of an element an image. This is done through the CSS property background-image. Its syntax looks like this:

.main-banner {
  background-image: url('https://www.example.com/image.jpg');
}


*Important
!important can be applied to specific declarations, instead of full rules. It will override any style no matter how specific it is. As a result, it should almost never be used. Once !important is used, it is very hard to override.

The syntax of !important in CSS looks like this:

p {
  color: blue !important;
}
 
.main p {
  color: red;
}

One justification for using !important is when working with multiple stylesheets. For example, if we are using the Bootstrap CSS framework and want to override the styles for one specific HTML element, we can use the !important property.

*THE BOX MODEL
The Box Model
The box model comprises the set of properties that define parts of an element that take up space on a web page. The model includes the content area’s size (width and height) and the element’s padding, border, and margin. The properties include:

width and height: The width and height of the content area.
padding: The amount of space between the content area and the border.
border: The thickness and style of the border surrounding the content area and padding.
margin: The amount of space between the border and the outside edge of the element.
image.png


*Borders
A border is a line that surrounds an element, like a frame around a painting. Borders can be set with a specific width, style, and color:

width—The thickness of the border. A border’s thickness can be set in pixels or with one of the following keywords: thin, medium, or thick.
style—The design of the border. Web browsers can render any of 10 different styles. Some of these styles include: none, dotted, and solid.
color—The color of the border. Web browsers can render colors using a few different formats, including 140 built-in color keywords.
p {
  border: 3px solid coral;
}

*Border Radius
Ever since we revealed the borders of boxes, you may have noticed that the borders highlight the true shape of an element’s box: square. Thanks to CSS, a border doesn’t have to be square.

You can modify the corners of an element’s border box with the border-radius property.

div.container {
  border: 3px solid blue;
  border-radius: 5px;
}

*Padding
The space between the contents of a box and the borders of a box is known as padding. Padding is like the space between a picture and the frame surrounding it. In CSS, you can modify this space with the padding property.

p.content-header {
  border: 3px solid coral;
  padding: 10px;
}


*padding properties as values on a single line:

padding-top
padding-right
padding-bottom
padding-left
sequence
p.content-header {
  padding: 6px 11px 4px 9px;
}
 